import re

def parse_docker_ps(output: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ `docker compose ps` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è Telegram.
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    lines = output.strip().splitlines()
    if not lines:
        return "‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."

    # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
    header = lines[0]
    # –Ω–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    splits = [m.start() for m in re.finditer(r'\s{2,}', header)]
    cols = []
    last = 0
    for idx in splits + [len(header)]:
        cols.append((last, idx))
        last = idx
    # –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    names = [header[a:b].strip() for a, b in cols]

    emoji_map = {
        'Up': '‚úÖ',       # —Ä–∞–±–æ—Ç–∞—é—â–∏–π
        'Exited': '‚ùå',   # –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        'Restarting': 'üîÑ', # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å—Ç–∞—Ç—É—Å—ã...
    }

    result = []
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É-—Ä–µ—Å—É—Ä—Å
    for line in lines[1:]:
        fields = [line[a:b].strip() for a, b in cols]
        info = dict(zip(names, fields))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞—á–∞–ª—É —Å—Ç–∞—Ç—É—Å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        state = info.get('State', info.get('STATUS', ''))
        em = '‚ÑπÔ∏è'
        for key, icon in emoji_map.items():
            if state.startswith(key):
                em = icon
                break

        name = info.get('Name', info.get('CONTAINER', '‚Äî'))
        cmd = info.get('Command', '')
        ports = info.get('Ports', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        block = (
            f"{em} <b>{name}</b>\n"
            f"{'‚Ä¢'} <i>State:</i> {state}\n"
        )
        if ports:
            block += f"‚Ä¢ <i>Ports:</i> {ports}\n"
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–æ–ª—è –ø–æ –∂–µ–ª–∞–Ω–∏—é
        result.append(block)

    return "\n".join(result)